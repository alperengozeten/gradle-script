plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
}

group 'com.carbonhealth.foundations'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}


configurations {
    tool
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    api ("com.carbonhealth.foundations:armeriacodegen:1.0-SNAPSHOT")
    tool ("com.carbonhealth.foundations:armeriacodegen:1.0-SNAPSHOT")
}

public class SwaggerCodegenTask extends DefaultTask {

    // Options
    private String path
    private String language
    private String outputPath

    // The language, "java" or "kotlin"
    @Option(option = "language", description = "The language (java or kotlin).")
    public void setLanguage(String language) {
        this.language = language;
    }

    // Path to the main repo
    @Option(option = "path", description = "The path to the main repo.")
    public void setPath(String path) {
        this.path = path;
    }

    // Output path
    @Option(option = "output_path", description = "The path to the output folder.")
    public void setOutPutPath(String outputPath) {
        this.outputPath = outputPath;
    }

    @TaskAction
    public void generate() {

        // Create a new template engine
        def engine = new groovy.text.SimpleTemplateEngine()

        // Create the path to the src folder of the go workspace
        def goSrcText = '${insertPath}/go/src'
        def pathBinding = ["insertPath":path]
        def goPathTemplate = engine.createTemplate(goSrcText).make(pathBinding)
        def goSrcPath = goPathTemplate.toString()

        // Generate path to the protos folder
        def protoText = '${insertPath}/protos'
        def protoBinding = ["insertPath":path]
        def protoTemplate = engine.createTemplate(protoText).make(protoBinding)
        def protoPath = protoTemplate.toString()

        /**

         // Generated output path for kotlin
         def kotlinGenerateText = '${insertDirPath}/generated/kotlin'
         def kotlinGenerateBinding = ["insertDirPath":project.projectDir.path]
         def kotlinGenerateTemplate = engine.createTemplate(kotlinGenerateText).make(kotlinGenerateBinding)
         def kotlinGeneratePath = kotlinGenerateTemplate.toString()

         // Generated output path for kotlin
         def javaGenerateText = '${insertDirPath}/generated/java'
         def javaGenerateBinding = ["insertDirPath":project.projectDir.path]
         def javaGenerateTemplate = engine.createTemplate(javaGenerateText).make(javaGenerateBinding)
         def javaGeneratePath = javaGenerateTemplate.toString()
         */

        // Path to the generated swagger file
        def jsonPath = './go/src/generated/apidocs.swagger.json'

        // Gradle somehow confuses "path" with other keywords inside project.exec
        // Just a name change for project.exec
        def mainPath = path;

        // project.exec does not recognize the outputPath which is defined outside of this method
        def outputFolderPath = outputPath


        // Generate the swagger file (OpenAPI) first
        project.exec {
            workingDir(goSrcPath)

            // We will use a list to add all the necessary arguments
            List<String> arguments = new ArrayList<>()

            arguments.add('cmd');
            arguments.add('/c');
            arguments.add('protoc');
            arguments.add('--openapiv2_out');
            arguments.add('./generated');
            arguments.add('--openapiv2_opt');
            arguments.add('logtostderr=true');
            arguments.add('--openapiv2_opt');
            arguments.add('allow_merge=true');
            arguments.add('--openapiv2_opt');
            arguments.add('simple_operation_ids=true')
            arguments.add('--openapiv2_opt');
            arguments.add('include_package_in_tags=true')
            arguments.add('--proto_path');
            arguments.add('../../protos');

            // Pick all the .proto files under the com/carbonhealth directory
            FileTree tree = project.fileTree(protoPath).include('**/com/carbonhealth/**')

            // Add them to the arguments list
            tree.each {aFile ->

                String pathProto = protoPath;

                // Create a StringBuilder since we will make some modifications
                StringBuilder sb = new StringBuilder(aFile.path.substring(pathProto.length() + 1))

                int length = sb.length()

                // Convert the back-slashes to slashes
                for ( int i = 0; i < length; i++ ) {
                    if ( sb.charAt(i) == '\\' as char ) {
                        sb.setCharAt(i, '/' as char)
                    }
                }

                arguments.add(sb.toString())
            }

            // Call the command
            commandLine(arguments)

            // The following wont be used since we need to add each proto file to arguments array
            //commandLine('cmd', '/c', 'protoc', '-I', '.', '--openapiv2_out', './generated', '--openapiv2_opt', 'logtostderr=true', '--openapiv2_opt', 'allow_merge=true', '--proto_path', '.', 'secondService.proto', 'service.proto')
            //println(getArgs().toString())
        }

        /**
        // If the language is kotlin
        if ( language.toLowerCase() == "kotlin" ) {
            project.exec {
                workingDir(mainPath)

                commandLine('cmd', '/c', 'java', '-jar', './go/swagger-codegen-cli.jar', 'generate', '-i', jsonPath, '-l', 'kotlin-armeria', '-o', outputFolderPath)
            }
            println('\n Kotlin-Armeria server is succesfully generated!')
        }


        // If the language is java
        else if ( language.toLowerCase() == "java" ) {
            project.exec {
                workingDir(mainPath)

                commandLine('cmd', '/c', 'java', '-jar', './go/swagger-codegen-cli.jar', 'generate', '-i', jsonPath, '-l', 'java-armeria', '-o', outputFolderPath)
            }
            println('\n Java-Armeria server is succesfully generated!')
        }

        else {
            println('Select "java" or "kotlin" as --language')
        }
         */
    }
}

public class GeneratePlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {

        project.tasks.register("generate", SwaggerCodegenTask)
    }
}

apply plugin : GeneratePlugin


gradlePlugin {
    plugins {
        generatePlugin {
            id = 'com.carbonhealth.foundations.generate'
            implementationClass = 'com.carbonhealth.foundations.GeneratePlugin'
        }
    }
}

//tasks.register("generate", SwaggerCodegenTask)